{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/webflow/getPublishDate.js", "../src/utils/greet.ts", "../src/utils/input_validations.ts", "../src/constants/regex.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * Extracts the publish date of a Webflow site\n * @returns A Date object, if found.\n * @param page The page to get the publish date from. Defaults to the current page.\n */\nexport const getPublishDate = (page = document) => {\n    const publishDatePrefix = 'Last Published:';\n    for (const node of page.childNodes) {\n        if (node.nodeType === Node.COMMENT_NODE && node.textContent?.includes(publishDatePrefix)) {\n            const publishDateValue = node.textContent.trim().split(publishDatePrefix)[1];\n            if (publishDateValue)\n                return new Date(publishDateValue);\n        }\n    }\n};\n", "import { getPublishDate } from '@finsweet/ts-utils';\n\n/**\n * Greets the user by printing a message in the console.\n * @param name The user's name.\n */\nexport const greetUser = (name: string) => {\n  const publishDate = getPublishDate();\n\n  console.log(`Hello ${name}!`);\n  console.log(\n    `This site was last published on ${publishDate?.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: '2-digit',\n    })}.`\n  );\n};\n", "interface FieldValidationOptions {\n  inputField: HTMLInputElement;\n  validationRegex: RegExp;\n  customErrorMessage: string;\n}\n\nexport function validateField({\n  inputField,\n  validationRegex,\n  customErrorMessage,\n}: FieldValidationOptions): void {\n  inputField.addEventListener('input', function () {\n    const inputValue = inputField.value;\n    const label = findLabelForInput(inputField);\n\n    const isValid = validationRegex.test(inputValue);\n\n    if (inputValue.trim() === '' || !isValid) {\n      inputField.setCustomValidity(\n        inputValue.trim() === '' ? 'This field is required.' : customErrorMessage\n      );\n      inputField.classList.add('is-invalid');\n      label?.classList.add('is-invalid');\n    } else {\n      inputField.setCustomValidity('');\n      inputField.classList.remove('is-invalid');\n      label?.classList.remove('is-invalid');\n    }\n    inputField.reportValidity();\n  });\n}\n\nfunction findLabelForInput(inputField: HTMLInputElement): HTMLLabelElement | null {\n  const { id } = inputField;\n  if (id) {\n    return document.querySelector(`label[for=\"${id}\"]`);\n  }\n  return null;\n}\n\n// function findLabelForInput(inputField: HTMLInputElement): HTMLLabelElement | null {\n//   const wizedAttribute = inputField.getAttribute('wized');\n//   if (wizedAttribute) {\n//     // Assuming wized attribute values are unique identifiers for labels\n//     return document.querySelector(`label[wized=\"${wizedAttribute}\"]`);\n//   }\n//   return null;\n// }\n", "export const regexConstants = {\n  addressline: /^[a-zA-Z0-9.'-]+(\\s*[a-zA-Z0-9'-.]+)*\\s*$/,\n  businessname: /^[a-zA-Z0-9\\s.'-]+$/,\n  churchname: /^[a-zA-Z0-9\\s.'-]+$/,\n  description: /^[\\x20-\\x7E]+$/,\n  email:\n    /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/,\n  firstname: /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z])$/,\n  jurisdiction: /^[\\x20-\\x7E]+$/,\n  lastname: /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z])$/,\n  middlename: /^([a-zA-Z]+.? ?)+[a-zA-Z]*$/,\n  password: /^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\\w\\d\\s:])([^\\s]){8,16}$/,\n  phone: /^(?:\\d{1}\\s)?\\(?(\\d{3})\\)?[-\\s]?(\\d{3})[-\\s]?(\\d{4})(?![\\d\\s.-])$/,\n  url: /[(http(s)?)://(www\\.)?a-zA-Z0-9@:%._\\+-~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&/\\\\/=]*)/,\n  username: /^\\w*\\d*$/,\n  zip: /^\\d{5}(-?\\d{4})?$/,\n};\n", "import { greetUser } from '$utils/greet';\nimport { validateField } from '$utils/input_validations';\n\nimport { regexConstants } from './constants/regex';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  const name = 'John Doe';\n  greetUser(name);\n\n  // get current page\n  const currentPage = window.location.pathname;\n  // SIGN UP PAGE\n  if (currentPage.includes('sign-up')) {\n    // Signup Form\n    const signupForm = document.querySelector('[wized=signup_form]') as HTMLFormElement;\n\n    // Signup Form Fields\n    const firstname = document.querySelector('[wized=first_name]') as HTMLInputElement;\n    const middlename = document.querySelector('[wized=middle_name]') as HTMLInputElement;\n    const lastname = document.querySelector('[wized=last_name]') as HTMLInputElement;\n    const username = document.querySelector('[wized=signup_username]') as HTMLInputElement;\n    const email = document.querySelector('[wized=signup_email]') as HTMLInputElement;\n    const password = document.querySelector('[wized=signup_password]') as HTMLInputElement;\n    // Submit button\n    const signupSubmitButton = document.querySelector('[wized=signup_submit]') as HTMLButtonElement;\n\n    validateField({\n      inputField: firstname,\n      validationRegex: regexConstants.firstname,\n      customErrorMessage: 'First name can only contains letters (at least 2 letters required)',\n    });\n    validateField({\n      inputField: middlename,\n      validationRegex: regexConstants.middlename,\n      customErrorMessage: 'Middle name can only contains letters',\n    });\n    validateField({\n      inputField: lastname,\n      validationRegex: regexConstants.lastname,\n      customErrorMessage: 'Last name can only contains letters',\n    });\n    validateField({\n      inputField: username,\n      validationRegex: regexConstants.username,\n      customErrorMessage: 'User name can only contains letters and numbers',\n    });\n    validateField({\n      inputField: email,\n      validationRegex: regexConstants.email,\n      customErrorMessage: 'Must be a valid email address',\n    });\n    validateField({\n      inputField: password,\n      validationRegex: regexConstants.password,\n      customErrorMessage:\n        'Password must be at least 8 characters long and contain at least one lower and upper case letter, one digit, and one symbol',\n    });\n\n    if (signupForm && signupSubmitButton) {\n      signupForm.addEventListener('input', () => {\n        const isValid = signupForm.checkValidity();\n        if (isValid) {\n          signupSubmitButton.classList.remove('is-disabled');\n        } else {\n          signupSubmitButton.classList.add('is-disabled');\n        }\n      });\n    }\n  }\n\n  // LOGIN PAGE\n  if (currentPage.includes('log-in')) {\n    // Login Form\n    const loginForm = document.querySelector('[wized=login_form]') as HTMLFormElement;\n    // Login Form Fields\n    const email = document.querySelector('[wized=login_email]') as HTMLInputElement;\n    const password = document.querySelector('[wized=login_password]') as HTMLInputElement;\n    // Submit button\n    const loginSubmitButton = document.querySelector('[wized=login_submit]') as HTMLButtonElement;\n\n    // Validate inputs\n    validateField({\n      inputField: email,\n      validationRegex: regexConstants.email,\n      customErrorMessage: 'Must be a valid Email Address',\n    });\n    validateField({\n      inputField: password,\n      validationRegex: regexConstants.password,\n      customErrorMessage:\n        'Password must be at least 8 characters long and contain at least one lower and upper case letter, one digit, and one symbol',\n    });\n\n    // Check if form is valid\n    if (loginForm && loginSubmitButton) {\n      loginForm.addEventListener('input', () => {\n        const isValid = loginForm.checkValidity();\n        if (isValid) {\n          loginSubmitButton.classList.remove('is-disabled');\n        } else {\n          loginSubmitButton.classList.add('is-disabled');\n        }\n      });\n    }\n  }\n});\n"],
  "mappings": "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",
  "names": []
}
